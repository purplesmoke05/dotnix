# Generated by nixos-generate-config / nixos-generate-config で生成
# Regeneration overwrites this file; edit /etc/nixos/configuration.nix instead. / 再生成で上書きされるため、変更は /etc/nixos/configuration.nix へ。
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  # Kernel modules / カーネルモジュール
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" ]; # Essential boot drivers / 起動に必須なドライバー
  boot.initrd.kernelModules = [ ]; # No extra early modules / 追加の早期モジュール不要
  boot.kernelModules = [ "kvm-intel" ]; # Enable Intel KVM / Intel KVM を有効化
  boot.extraModulePackages = [ ]; # No extra modules / 追加パッケージ不要

  # Root filesystem / ルートファイルシステム
  fileSystems."/" =
    {
      device = "/dev/disk/by-uuid/13f14e5b-acc1-4170-8a3c-20f06a8dbe62";
      fsType = "ext4";
    };

  # Boot partition / ブートパーティション
  fileSystems."/boot" =
    {
      device = "/dev/disk/by-uuid/9C1E-EFBD";
      fsType = "vfat"; # EFI System Partition / EFI システムパーティション
      options = [ "fmask=0077" "dmask=0077" ]; # Secure mount options / 安全なマウントオプション
    };

  # No swap configured / スワップ未設定
  swapDevices = [ ];

  # DHCP defaults / DHCP 既定値
  # With networkd, add per-interface overrides. / networkd と併用時は個別設定推奨。
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  # Architecture & CPU / アーキテクチャと CPU
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux"; # 64-bit system / 64bit システム
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware; # Intel microcode updates / Intel マイクロコード更新
  hardware.enableAllFirmware = true;

  # Graphics configuration / グラフィックス設定
  # Configure proprietary NVIDIA driver tuned for Wayland. / NVIDIA 専用ドライバーで Wayland 最適化。
  hardware = {
    nvidia = {
      modesetting.enable = true;
      open = false;
      nvidiaSettings = true;
      package = config.boot.kernelPackages.nvidiaPackages.stable;
    };
    opengl = {
      enable = true;
      driSupport32Bit = true;
      extraPackages = with pkgs; [
        vaapiVdpau
        libvdpau-va-gl
        nvidia-vaapi-driver
      ];
    };
  };
}
